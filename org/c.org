** 程序的基本概念
*** 程序和编程语言
程序由一系列指令（Instruction）组成，指令是指示计算机做某种运算的命令，通常包括以下几类：

输入（Input）
从键盘、文件或者其它设备获取数据。

输出（Output）
把数据显示到屏幕，或者存入一个文件，或者发送到其它设备。

基本运算
执行最基本的数学运算（加减乘除）和数据存取。

测试和分支
测试某个条件，然后根据不同的测试结果执行不同的后续指令。

循环
重复执行一系列操作。

总结一下编译、执行的过程
首先你用文本编辑器写一个C程序，然后保存成一个文件，例如program.c（通常C程序的文件名后缀是.c），这称为源代码（Source Code）或源文件，然后运行编译器对它进行编译，编译的过程并不执行程序，而是把源代码全部翻译成机器指令，再加上一些描述信息，生成一个新的文件，例如a.out，这称为可执行文件，可执行文件可以被操作系统加载运行，计算机执行该文件中由编译器生成的指令，如下图所示：

source code -- |compiler| -- executable -- |loader| -- result


解释过程
例如：
    #! /bin/sh
    VAR=1
    VAR=$(($VAR+1))
    echo $VAR

这里的/bin/sh称为解释器（Interpreter)，它把脚本中的每一行当作一条命令解释执行，而不需要先生成包含机器指令的可执行文件再执行。

source code -- |interpreter| -- result

本节内容总结
    程序由语句或指令组成，计算机只能执行低级语言中的指令（汇编语言的指令要先转成机器码才能执行），高级语言要执行就必须先翻译成低级语言，翻译的方法有两种－－编译和解释
，虽然有这样的不便，但高级语言有一个好处是平台无关性。什么是平台？一种平台，就是一种体系结构，就是一种指令集，就是一种机器语言，这些都可看作是一一对应的，上文并没
有用“一一对应”这个词，但读者应该能推理出这个结论，而高级语言和它们不是一一对应的，因此高级语言是平台无关的，概念之间像这样的数量对应关系尤其重要。那么编译和解释的
过程有哪些不同？主要的不同在于什么时候翻译和什么时候执行。
*** 自然语言和形式语言
    形式语言有严格的语法（Syntax）规则，语法规则是由符号（Token）和结构（Structure）的规则所组成的。Token的概念相当于自然语言中的单词和标点、数学式中的数和运算符
、化学分子式中的元素名和数字，例如3=+6$的问题之一在于$不是一个合法的数也不是一个事先定义好的运算符，结构是指Token的排列方式，3=+6$还有一个结构上的错误，虽然加号和
等号都是合法的运算符，但是不能在等号之后紧跟加号。关于Token的规则称为词法（Lexical）规则，而关于结构的规则称为语法（Grammar）规则。


建议
   现在给出一些关于阅读程序（包括其它形式语言）的建议。首先请记住形式语言远比自然语言紧凑，所以要多花点时间来读。其次，结构很重要，从上到下从左到右读往往不是一个好办法，
而应该学会在大脑里解析：识别Token，分解结构。最后，请记住细节的影响，诸如拼写错误和标点错误这些在自然语言中可以忽略的小毛病会把形式语言搞得面目全非。
*** 程序的调试（Debug）
编译时错误

    编译器只能翻译语法正确的程序，否则将导致编译失败，无法生成可执行文件。等到经验更丰富之后你就会觉得，语法错误是最简单最低级的错误，编译器的错误提示也就那
么几种，即使错误提示是有误导的也能够立刻找出真正的错误原因是什么。



运行时错误

    编译器检查不出这类错误，仍然可以生成可执行文件，但在运行时会出错而导致程序崩溃。在以后的学习中要时刻注意区分编译时和运行时（Run-time）这两个概念，不仅在
调试时需要区分这两个概念，在学习C语言的很多语法时都需要区分这两个概念，有些事情在编译时做，有些事情则在运行时做。



逻辑错误和语义错误

    第三类错误是逻辑错误和语义错误。如果程序里有逻辑错误，编译和运行都会很顺利，看上去也不产生任何错误信息，但是程序没有干它该干的事情，而是干了别的事情。当然
不管怎么样，计算机只会按你写的程序去做，问题在于你写的程序不是你真正想要的，这意味着程序的意思（即语义）是错的。找到逻辑错误在哪需要十分清醒的头脑，要通过观察
程序的输出回过头来判断它到底在做什么。
*** 第一个程序Hello World!

习题

    1、尽管编译器的错误提示不够友好，但仍然是学习过程中一个很有用的工具。你可以像上面那样，从一个正确的程序开始每次改动一小点，然后编译看是什么结果，如果出错
了，就尽量记住编译器给出的错误提示并把改动还原。因为错误是你改出来的，你已经知道错误原因是什么了，所以能很容易地把错误原因和错误提示信息对应起来记住，这样下次
你在毫无防备的情况下撞到这个错误提示时就会很容易想到错误原因是什么了。这样反复练习，有了一定的经验积累之后面对编译器的错误提示就会从容得多了。

** 18.09.18
用emacs编译c代码
1.创建一个文件写入代码
2.使用 M-x eshell 或者 M-x shell进入 eshell或者shell
3.使用 eshell 键入“g++ c文件名字 -o(这是字母) 文件名(去掉后缀)”编译源文件
4.直接输入./文件名(去掉后缀)
** 常量、变量和表达式
