* HTML
** Basic Tags

a                        <a href=""></a>
a.x                      <a class="x" href=""></a>
a#q.x                    <a id="q" class="x" href=""></a>
a#q.x.y.z                <a id="q" class="x y z" href=""></a>
#q                       <div id="q">
</div>
.x                       <div class="x">
</div>
#q.x                     <div id="q" class="x">
</div>
#q.x.y.z                 <div id="q" class="x y z">
</div>

** Empty Tags

a/                       <a href=""/>
a/.x                     <a class="x" href=""/>
a/#q.x                   <a id="q" class="x" href=""/>
a/#q.x.y.z               <a id="q" class="x y z" href=""/>

** Selfing-closing Tags

input[type=text]         <input type="text" name="" value=""/>
img                      <img src="" alt=""/>
img>metadata/*2          <img src="" alt="">
<metadata/>
<metadata/>
</img>

** Sliblings

a+b                      <a href=""></a>
<b></b>
a+b+c                    <a href=""></a>
<b></b>
<c></c>
a.x+b                    <a class="x" href=""></a>
<b></b>
a#q.x+b                  <a id="q" class="x" href=""></a>
<b></b>
a#q.x.y.z+b              <a id="q" class="x y z" href=""></a>
<b></b>
a#q.x.y.z+b#p.l.m.n      <a id="q" class="x y z" href=""></a>
<b id="p" class="l m n"></b>

** Tag expansion

table+                   <table>
<tr>
<td>
</td>
</tr>
</table>

dl+                      <dl>
<dt></dt>
<dd></dd>
</dl>

ul+                      <ul>
<li></li>
</ul>

ul++ol+                  <ul>
<li></li>
</ul>
<ol>
<li></li>
</ol>

ul#q.x.y[m=l]            <ul id="q" class="x y" m="l">
<li></li>
</ul>

** Parent > child

a>b                      <a href=""><b></b></a>
a>b>c                    <a href=""><b><c></c></b></a>
a.x>b                    <a class="x" href=""><b></b></a>
a#q.x>b                  <a id="q" class="x" href=""><b></b></a>
a#q.x.y.z>b              <a id="q" class="x y z" href=""><b></b></a>
a#q.x.y.z>b#p.l.m.n      <a id="q" class="x y z" href=""><b id="p" class="l m n"></b></a>
#q>.x                    <div id="q">
<div class="x">
</div>
</div>

a>b+c                    <a href="">
<b></b>
<c></c>
</a>

a>b+c>d                  <a href="">
<b></b>
<c><d></d></c>
</a>

** Climb-Up

a>b^c                    <a href=""><b></b></a><c></c>
a>b>c^d                  <a href="">
<b><c></c></b>
<d></d>
</a>
a>b>c^^d                 <a href=""><b><c></c></b></a>
<d></d>

** Multiplication

a*1                      <a href=""></a>
a*2                      <a href=""></a>
<a href=""></a>
a/*2                     <a href=""/>
<a href=""/>
a*2+b*2                  <a href=""></a>
<a href=""></a>
<b></b>
<b></b>
a*2>b*2                  <a href="">
<b></b>
<b></b>
</a>
<a href="">
<b></b>
<b></b>
</a>
a>b*2                    <a href="">
<b></b>
<b></b>
</a>
a#q.x>b#q.x*2            <a id="q" class="x" href="">
<b id="q" class="x"></b>
<b id="q" class="x"></b>
</a>
a#q.x>b/#q.x*2           <a id="q" class="x" href="">
<b id="q" class="x"/>
<b id="q" class="x"/>
</a>

** Item numbering

ul>li.item$*3            <ul>
<li class="item1"></li>
<li class="item2"></li>
<li class="item3"></li>
</ul>
ul>li.item$$$*3          <ul>
<li class="item001"></li>
<li class="item002"></li>
<li class="item003"></li>
</ul>
ul>li.item$@-*3          <ul>
<li class="item3"></li>
<li class="item2"></li>
<li class="item1"></li>
</ul>
ul>li.item$@3*3          <ul>
<li class="item3"></li>
<li class="item4"></li>
<li class="item5"></li>
</ul>
ul>li.item$@-3*3         <ul>
<li class="item5"></li>
<li class="item4"></li>
<li class="item3"></li>
</ul>
a$b$@-/*5                <a1b5/>
<a2b4/>
<a3b3/>
<a4b2/>
<a5b1/>
a.$*2>b.$$@-*3           <a class=\"1\" href="">
<b class=\"03\"></b>
<b class=\"02\"></b>
<b class=\"01\"></b>
</a>
<a class=\"2\" href="">
<b class=\"03\"></b>
<b class=\"02\"></b>
<b class=\"01\"></b>
</a>
(div>(a#id$$*2)+b.c$@-3+c#d$)*2
<div>
<a id=\"id01\" href=""></a>
<a id=\"id02\" href=""></a>
<b class=\"c4\"></b>
<c id=\"d1\"></c>
</div>
<div>
<a id=\"id01\" href=""></a>
<a id=\"id02\" href=""></a>
<b class=\"c3\"></b>
<c id=\"d2\"></c>
</div>
ul>li.c${price: 10\\$}*3 <ul>
<li class=\"c1\">price: 10$</li>
<li class=\"c2\">price: 10$</li>
<li class=\"c3\">price: 10$</li>
</ul>

** Properties

b[x]                     <b x=""></b>
b[x=]                    <b x=""></b>
b[x=""]                  <b x=""></b>
b[x=y]                   <b x="y"></b>
b[x="y"]                 <b x="y"></b>
b[x="()"]                <b x="()"></b>
b[x m]                   <b x="" m=""></b>
b[x= m=""]               <b x="" m=""></b>
b[x=y m=l]               <b x="y" m="l"></b>
b/[x=y m=l]              <b x="y" m="l"/>
b#foo[x=y m=l]           <b id="foo" x="y" m="l"></b>
b.foo[x=y m=l]           <b class="foo" x="y" m="l"></b>
b#foo.bar.mu[x=y m=l]    <b id="foo" class="bar mu" x="y" m="l"></b>
b/#foo.bar.mu[x=y m=l]   <b id="foo" class="bar mu" x="y" m="l"/>
b[x=y]+b                 <b x="y"></b>
<b></b>
b[x=y]+b[x=y]            <b x="y"></b>
<b x="y"></b>
b[x=y]>b                 <b x="y"><b></b></b>
b[x=y]>b[x=y]            <b x="y"><b x="y"></b></b>
b[x=y]>b[x=y]+c[x=y]     <b x="y">
<b x="y"></b>
<c x="y"></c>
</b>

** Parenthese

(a)                      <a href=""></a>
(a)+(b)                  <a href=""></a>
<b></b>
a>(b)                    <a href=""><b></b></a>
(a>b)>c                  <a href=""><b></b></a>
(a>b)+c                  <a href=""><b></b></a>
<c></c>
z+(a>b)+c+k              <z></z>
<a href=""><b></b></a>
<c></c>
<k></k>
(x)*2                    <x></x>
<x></x>
((x)*2)                  <x></x>
<x></x>
((x))*2                  <x></x>
<x></x>
(x>b)*2                  <x><b></b></x>
<x><b></b></x>
(x+b)*2                  <x></x>
<b></b>
<x></x>
<b></b>

** Text

a{Click me}              <a href="">Click me</a>
a>{Click me}*2           <a href="">
Click me
Click me
</a>
x{click}+b{here}         <x>click</x>
<b>here</b>
span>{click}+b{here}     <span>
click
<b>here</b>
</span>
p>{Click}+span{here}+{ to continue}
<p>
Click
<span>here</span>
to continue
</p>
p{Click}+span{here}+{ to continue}
<p>
Click
</p>
<span>here</span>
to continue
p{\{Escape brackets!\} and \\}
<p>{Escape brackets} and \</p>

** Lorem-Ipsum generator

lorem                    Diam, vulputate ut pharetra sit amet, aliquam id! Egestas sed tempus, urna et pharetra pharetra, massa massa ultricies mi, quis hendrerit dolor magna eget est lorem ipsum dolor sit amet!
lorem5                   Hendrerit gravida rutrum quisque non?
ipsum3                   Viverra ipsum nunc.
p*3>lorem3               <p>Pellentesque elit eget?</p>
<p>Sed odio morbi?</p>
<p>Eget arcu dictum!</p>
ul.list>ipsum3*3         <ul class=\"list\">
Nam libero justo.
Pellentesque habitant morbi?
Enim blandit volutpat.
</ul>
ul.list>ipsum3.itm*3     <ul class=\"list\">
<div class=\"itm\">Urna condimentum mattis.</div> <!-- emmet-mode doesn't support implicit tag name resolver -->
<div class=\"itm\">Sed turpis tincidunt.</div>
<div class=\"itm\">Faucibus turpis in?</div>
</ul>
ul.list>(li.itm>lorem3)*3
<ul class=\"list\">
<li class=\"itm\">Est pellentesque elit.</li>
<li class=\"itm\">In nulla posuere.</li>
<li class=\"itm\">Felis eget nunc.</li>
</ul>

** Filter: HTML with comments

a.b|c                    <!-- .b -->
<a class="b" href=""></a>
<!-- /.b -->
#a>.b|c                  <!-- #a -->
<div id="a">
<!-- .b -->
<div class="b">
</div>
<!-- /.b -->
</div>
<!-- /#a -->

** Filter: HAML

a|haml                   %a
a#q.x.y.z|haml           %a#q.x.y.z
a#q.x[x=y m=l]|haml      %a#q.x{:x => "y", :m => "l"}
div|haml                 %div
div.footer|haml          .footer
.footer|haml             .footer
p>{txt}+a[href=#]+br|haml  %p
txt
%a{:href => "#"}
%br

** Filter: Hiccup

a|hic                    [:a]
a#q.x.y.z|hic            [:a#q.x.y.z]
a#q.x[x=y m=l]|hic       [:a#q.x {:x "y", :m "l"}]
.footer|hic              [:div.footer]
p>a[href=#]+br|hic       [:p
[:a {:href "#"}]
[:br]]
#q>(a*2>b{x})+p>b|hic    [:div#q
[:a [:b "x"]]
[:a [:b "x"]]
[:p
[:b]]]

** Filter: escape

script[src=&quot;]|e     &lt;script src="&amp;quot;"&gt;
&lt;/script&gt;

** Aliases

html:5                   <!doctype html>
<html lang="en">
<head>
<meta charset="UTF-8"/>
<title>Document</title>
</head>
<body>
</body>
</html>

html:xt                  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
<title>Document</title>
</head>
</html>

meta:vp                  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"/>
* CSS
** Basic Usage

p1-2!+m10e+bd1#2s        padding: 1px 2px !important;
margin: 10em;
border: 1px #222 solid;

** Keywords

m                        margin: ;
bg+                      background: #fff url() 0 0 no-repeat;
c                        color: #000;

** Values

separate each value by '-' or ' ';

m1-2-3-4                 margin: 1px 2px 3px 4px;
m1 2 3 4                 margin: 1px 2px 3px 4px;
m1--2                    margin: 1px -2px;
m1 -2                    margin: 1px -2px;

bg+#c /back.png 10 20 repeat-x
background: #cccccc url(/back.png) 10px 20px repeat-x;

** Multiple property definition

concatenate each property by '+';

m10+p0                   margin: 10px;
padding: 0px;

bg++c#0                  background: #fff url() 0 0 no-repeat;
color: #000;

m0+p10+c#f+fw:b+w100+h20+bg#f00
margin: 0px;
padding: 10px;
color: #fff;
font-weight: bold;
width: 100px;
height: 20px;
background: #f00;

** Value units

m10                      margin: 10px;
m1.5                     margin: 1.5em;
m1.5ex                   margin: 1.5ex;
m1.5x                    margin: 1.5ex;
m10foo                   margin: 10foo;
m10ex20em                margin: 10ex 20em;
m10x20e                  margin: 10ex 20em;
m10x-5                   margin: 10ex -5px;
w100p                    width: 100%;
m10p30e5x                margin: 10% 30em 5ex;

*** Unit-aliases

e                        em
p                        %
x                        ex
r                        rem

** Unitless property

lh2                      line-height: 2;
fw400                    font-weight: 400;

** Color abbreviations

c#3                      color: #333;
bd5#0s                   border: 5px #000 solid; /* s: solid, t: dotted, n: none, h: hidden */
bd5#20rgb                border: 5px rgb(32,32,32);
bd5#20rgbt               border: 5px rgb(32,32,32) dotted;

*** Color expansion

#1                       #111
#e0                      #e0e0e0
#fc0                     #fc0

** Important

c#3!+bdrs2!              color: #333 !important;
border-radius: 2px !important;
* Nesting operators
** Child:                      >  :添加 sub 标签

You can use > operator to nest elements inside each other:

div>ul>li
...will produce
#+begin_src html
  <div>
    <ul>
      <li></li>
    </ul>
  </div>

#+end_src
** Sibling:                    +  :添加同级标签

Use + operator to place elements near each other, on the same level:

div+p+bq
...will output
#+begin_src html
  <div></div>
  <p></p>
  <blockquote></blockquote>
#+end_src

** Climb-up:                   ^  :添加 sup 标签

With > operator you’re descending down the generated tree and positions of all sibling elements will be resolved against the most deepest element:

div+div>p>span+em
...will be expanded to
#+begin_src html
  <div></div>
  <div>
    <p><span></span><em></em></p>
  </div>
#+end_src

With ^ operator, you can climb one level up the tree and change context where following elements should appear:

div+div>p>span+em^bq
...outputs to
#+begin_src html
  <div></div>
  <div>
    <p><span></span><em></em></p>
    <blockquote></blockquote>
  </div>
#+end_src

ATTENTION
You can use as many ^ operators as you like, each operator will move one level up:

div+div>p>span+em^^^bq
...will output to
#+begin_src html
  <div></div>
  <div>
    <p><span></span><em></em></p>
  </div>
  <blockquote></blockquote>

#+end_src

** Multiplication:             *  :添加多个相同标签

With * operator you can define how many times element should be outputted:

ul>li*5
...outputs to
#+begin_src html
  <ul>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
  </ul>
#+end_src

** Grouping:                   () :界定同级标签

Parenthesises are used by Emmets’ power users for grouping subtrees in complex abbreviations:

div>(header>ul>li*2>a)+footer>p
...expands to
#+begin_src html
  <div>
    <header>
      <ul>
        <li><a href=""></a></li>
        <li><a href=""></a></li>
      </ul>
    </header>
    <footer>
      <p></p>
    </footer>
  </div>

#+end_src
If you’re working with browser’s DOM, you may think of groups as Document Fragments: each group contains abbreviation subtree and all the following elements are inserted at the same level as the first element of group.

ATTENTION
You can nest groups inside each other and combine them with multiplication * operator:

(div>dl>(dt+dd)*3)+footer>p
...produces
#+begin_src html
  <div>
    <dl>
      <dt></dt>
      <dd></dd>
      <dt></dt>
      <dd></dd>
      <dt></dt>
      <dd></dd>
    </dl>
  </div>
  <footer>
    <p></p>
  </footer>
#+end_src

With groups, you can literally write full page mark-up with a single abbreviation, but please don’t do that.

* Attribute operators

** ID                          #  :添加 id
** CLASS                       .  :添加 class
In CSS, you use elem#id and elem.class notation to reach the elements with specified id or class attributes. In Emmet, you can use the very same syntax to add these attributes to specified element:

div#header+div.page+div#footer.class1.class2.class3
...will output
#+begin_src html
  <div id="header"></div>
  <div class="page"></div>
  <div id="footer" class="class1 class2 class3"></div>

#+end_src
** Custom attributes           [] :

You can use [attr] notation (as in CSS) to add custom attributes to your element:

td[title="Hello world!" colspan=3]
...outputs
#+begin_src html
  <td title="Hello world!" colspan="3"></td>
#+end_src

- You can place as many attributes as you like inside square brackets.
- You don’t have to specify attribute values: td[colspan title] will produce <td colspan="" title=""> with tabstops inside each empty attribute (if your editor supports them).
- You can use single or double quotes for quoting attribute values.
- You don’t need to quote values if they don’t contain spaces: td[title=hello colspan=3] will work.
** Item numbering:             $  :添加数字

With multiplication * operator you can repeat elements, but with $ you can number them. Place $ operator inside element’s name, attribute’s name or attribute’s value to output current number of repeated element:

ul>li.item$*5
...outputs to

#+begin_src html
  <ul>
    <li class="item1"></li>
    <li class="item2"></li>
    <li class="item3"></li>
    <li class="item4"></li>
    <li class="item5"></li>
  </ul>

#+end_src

ATTENTION
You can use multiple $ in a row to pad number with zeroes:

ul>li.item$$$*5
...outputs to
#+begin_src html
  <ul>
    <li class="item001"></li>
    <li class="item002"></li>
    <li class="item003"></li>
    <li class="item004"></li>
    <li class="item005"></li>
  </ul>
#+end_src

** Text:                       {} :添加文字

You can use curly braces to add text to element:

a{Click me}
...will produce

#+begin_src html
  <a href="">Click me</a>
#+end_src

Note that {text} is used and parsed as a separate element (like, div, p etc.) but has a special meaning when written right after element. For example, a{click} and a>{click} will produce the same output, but a{click}+b{here} and a>{click}+b{here} won’t:

#+begin_src html
  <!-- a{click}+b{here} -->
  <a href="">click</a><b>here</b>

  <!-- a>{click}+b{here} -->
  <a href="">click<b>here</b></a>
#+end_src

In second example the <b> element is placed inside <a> element. And that’s the difference: when {text} is written right after element, it doesn’t change parent context. Here’s more complex example showing why it is important:

p>{Click }+a{here}+{ to continue}
...produces

#+begin_src html
  <p>Click <a href="">here</a> to continue</p>
#+end_src

In this example, to write Click here to continue inside <p> element we have explicitly move down the tree with > operator after p, but in case of a element we don’t have to, since we need <a> element with here word only, without changing parent context.

For comparison, here’s the same abbreviation written without child > operator:

p{Click }+a{here}+{ to continue}
...produces

#+begin_src html
  <p>Click </p>
  <a href="">here</a> to continue
#+end_src

* Implicit tag names


Emmet looks at the parent tag name every time you’re expanding the abbreviation with an implicit name. Here’s how it resolves the names for some parent elements:

1) li for ul and ol
2) tr for table, tbody, thead and tfoot
3) td for tr
4) option for select and optgroup
