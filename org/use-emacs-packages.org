* Build-in package system

| command | describe                                                   |
|---------+------------------------------------------------------------|
| i       | mark file after install package                            |
| u       | cancel mark                                                |
| U       | upgrade all files which can upgrade                        |
| d       | mark file after uninstall (notes useful build-in packages) |

*finally*

type x 执行上面对应的 mark 操作（删除，更新）

* package ivy
* package evil-nerd-commenter

commenter keyblinding is "M-;",you can set you like in init.el
Here are the keyblinding setting
#+BEGIN_SRC emacs-lisp
  ;; Emacs key bindings
(global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines)
(global-set-key (kbd "C-c l") 'evilnc-quick-comment-or-uncomment-to-the-line)
(global-set-key (kbd "C-c c") 'evilnc-copy-and-comment-lines)
(global-set-key (kbd "C-c p") 'evilnc-comment-or-uncomment-paragraphs)

#+END_SRC

* package magit

*1.open magit (C-x G)*

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x G") 'magit-status)
#+END_SRC


*2.Staged changes (s)*

__press keyboard s_

1) we can staged part of a file (move cursor on region you want to staged)
2) we can staged a complete file


*3.Untrack file (K)*

 _press keyboard K_


*4.Unstaged changes (u)*

 _press keyboard u_


*5.refresh (g/G)**

G refresh all Magit buffer belong to the current repository


*6.jump section (j)*

 _press keyboard j_


*7.diff setting (d/D)*

 _press keyboard d(D)_     you could see all setting about =diff=

look the change of two branchs
1.type d
2.type r
3.Then you can look a pop like

/Diff for range (master):/

if you want to look at diff master branch and dev branch,you could type

Diff for range (master): origin/master...dev


*8.edit thing on diff (C-c C-e)*

_press keyboard C-c C-e_

press it on the region you want to change,you will jump to it.


*9.Ediff (E)*

_press keyboard E_


*10.Reset (x/X)*

_press keyboard x(X)_

reset like HEAD .branchs,etc...


*11.Commit (c)*

_press keyboard c_

type c to commit(there are many functions),when you finish commit message,type C-c C-c update.
C-c C-k to cancel it


*12.Tag (t)*

_press keyboard t_
not unuall



*13.Branchs (b)*

_press keyboard b_



*14.WorkTree (%)*

_press keyboard %_



*15.Process buffer ($)*

_press keyboard $_

this buffer will record your all handle



*16.Push (P)*

_press keyboard P_

Then press u push to the upstream branch



*17.Fetch (f)*

_press keyboard f_



*18.Pull (F)*

_press keyboard F_



*19.Submodules (o)*

_press keyboard o_



*20.Subtree (O)*

_press keyboard O_



*21.Merge (m)*

_press keyboard m_



*22.Rebasing (r)*

_press keyboard r_

1.quick fixup rebase (rf)
2.something even faster (C-c C-e)



*23.Stashes (z)*

_press keyboard z_



*24.Snapshots (z Z)*

_press keyboard z Z_



*25.Remotes (M)*

_press keyboard M_



---*26.Use traditonal git (!, :)*---

_press keyboard ! or :_

we can type any git command



*27.Resolving conficts (e)*

_press keyboard e_



---*28.Logging (l\L)*---

_press keyboard l/L_

L has meaning in the log buffer itself
For example, try 'L L' or 'L d' or 'L C-t'



*29.Applying (a)*

_press keyboard a_



---*30.Branchs and refs (y)*---

_press keyboard y_



*31.Cherries (Y)*

_press keyboard Y_



*32.Revert (V)*

_press keyboard V_



---*33.Git Notes (T)*---

_press keyboard T_



*34.Bisecting (B)*

_press keyboard B_



*35.Blaming (M-x magit-blame)*

it works on a file buffer



*36.Creating and sending patches (W)*

_press keyboard W_



*37.Applying patches (w)*

_press keyboard w_



*38.The Dispatches (h or ? or C-c C-c)*

_press keyboard ......_



---*39.Press ?(get help about keybinging)*---
* package occur and imenu

*occur*

keybinging M-s o
pop a window, make a list, list all the same word(with line) on the buffer

then on the pop window,we can type _e_, we can edit on pop window.
type _C-c C-c_ return occur mode

*imenu*

keybinging M-s i
improve instead of counsel imenu, it can list all functions on the buffer

* package helm-ag

 1) install ag (the_silver_searcher)

* package dired

** 分色（给一些特定后缀名的文件标注特定的颜色）

   假设我们想把所有org文件用黄色标注出来,那么可以这样做:

   1) 运行 M-s h l 或者 M-x highlight-lines-matching-regexp
   2) 输入正则表达式 \.org$
   3) 输入标注作色的face hi-yellow
   4) 当然你也可以通过 dired-mode-hook 让这一分色过程自动化:

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
          (lambda ()
            (highlight-lines-matching-regexp "\.org$" 'hi-yellow)))
#+END_SRC

** 快捷键
| command | describe               |
| t       | Inverse selection mark |

* package org-mode 9.2.3
** Document Structure

*** Outline

   #+STARTUP: indent ;;让所有”星星“下的文件缩进
   #+STARTUP: hidestars
   #+STARTUP: showstars
   #+STARTUP: odd ;;“星星”个数以奇数排列，1 level-一星，2 level-三星，3 level-五星
   #+STARTUP: oddeven ;;同样的效果
   #+STARTUP: overview
   #+STARTUP: content
   #+STARTUP: showall
   #+STARTUP: showeverything
   #+STARTUP: hideblocks
   #+STARTUP: nohideblocks

*** Motion（在标题间移动）

| command | describe                    |
|---------+-----------------------------|
| C-c C-n | Next heading                |
| C-c C-p | Previous heading            |
| C-c C-f | same level next heading     |
| C-c C-b | same level previous heading |
| C-c C-u | Backward higher level       |

‘C-c C-j’ (‘org-goto’)
     Jump to a different place without changing the current outline
     visibility.  Shows the document structure in a temporary buffer,
     where you can use the following keys to find your destination:

     ‘<TAB>’                Cycle visibility.
     ‘<DOWN>’ / ‘<UP>’      Next/previous visible headline.
     ‘<RET>’                Select this location.
     ‘/’                    Do a Sparse-tree search

     The following keys work if you turn off ‘org-goto-auto-isearch’

     ‘n’ / ‘p’              Next/previous visible headline.
     ‘f’ / ‘b’              Next/previous headline same level.
     ‘u’                    One level up.
     ‘0’ ... ‘9’            Digit argument.
     ‘q’                    Quit.

     See also the variable ‘org-goto-interface’.

*** Sparse Tree

*Matches* embedded in context

*** Global and Local cycling(标题展开和收缩)

| command     | describe                             |
|-------------+--------------------------------------|
| <TAB>       | local                                |
| S-<TAB>     | global(step by step)                 |
| C-c C-k     | show all branchs                     |
| C-c TAB     | show children                        |
| * C-c C-x b | push this headline to another buffer |
| * C-c C-x v | copy this headline contents          |

*** Structure Editing(标题的操作)

| command     | describe                                                   |
|-------------+------------------------------------------------------------|
| M-<RET>     |                                                            |
| C-<RET>     |                                                            |
| M-S-<RET>   | insert new TODO heading                                    |
| C-S-<RET>   |                                                            |
| M-<left>    | *reduce* a star on *heading* (demote heading by one level) |
| M-<right>   | *add* a star on *heading* (promote heading by one level)   |
| M-S-<left>  | *reduce* a star current *subtree*                          |
| M-S-<right> | *add* a star current *subtree*                             |
| C-c @       | *mark* subtree                                             |
| C-c C-w     | *move* current heading to another heading                  |

*** List

1. _unorder_       start with ‘-’, ‘+’, or ‘*’ as bullets.
2. _order_         start with ‘1.’ ‘1)’
3. _description_   start with '::'

| command         | description                                           |
|-----------------+-------------------------------------------------------|
| M-<RET>         | insert *heading* and sort(if you use oder list)       |
| M-S-<RET>       | insert a *checkbox*                                   |
| M-<UP>          | move list *up*                                        |
| M-<DOWN>        | move list *down*                                      |
| C-c ^           | *sort* plain list(you can chocies types such as time) |
| C-c *           | change list to subheading                             |
| C-c C-*         | change all list to subheading                         |
| S-<left>/<down> | cycles bullets styles '- + 1. 1)'                     |

*** Drawercs(抽屉)

- Note taken on [2019-05-03 五 11:33] \\
  实验
- Note taken on [2019-05-03 五 11:30] \\
  还在看第一章节

:learn-org:
这是第二天
:END:

This is a headline
Still outside the drawer
     :DRAWERNAME:
     This is inside the drawer.
     :END:
     After the drawer.

     快速创建 _C-c C-x d_

     增加时间戳 to 'LOGBOOK' drawer _C-c C-z_

*** Footnotes(脚注)

footnote action 快捷键 C-c C-x f
我感觉没多大用，要插入链接的话，直接用 C-c C-l 更快

** Hyperlinks
*** format

两个嵌套的[]，这是最简单的
[[link][(description)]] 光标移至括号后面，按 Backspace，你将会看见这个结构

*** Internal Links

更倾向于使用两个嵌套的[]
#+NAME: My Target
| a  | table      |
|----+------------|
| of | four cells |

[[(1)]]
<<My Target>>

*** Link Abbreviations

[[linkword:tag][descript
** TODO Items

*** TODO Basics

非常重要的一个快捷键 _C-c /_

| command          | description             |
|------------------+-------------------------|
| S-<left>/<right> | Select the TODO state   |
| S-M-<RET>        | org-insert-todo-heading |
| C-c / t          | org-show-todo-tree      |
| M-x org-agenda   | org-todo-list           |

*** TODO Extended Use of TODO Keywords

插入块，在9.2及以上版本，使用快捷键C-c C-,

**** Workflow states
#+begin_src emacs-lisp
;;好像没啥用
(setq org-todo-keywords
           '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))

;;按照 TODO 到 FEEDBACK 到 VERIFY 到 DONE 到 DELEGATED 的顺序
#+end_src

**** TODO types
#+begin_src emacs-lisp
;;可能会有用，可以将任务分配给个人
(setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))
#+end_src

**** Multiple keyword sets in one file

#+begin_src emacs-lisp
(setq org-todo-keywords
           '((sequence "TODO" "|" "DONE")                        ;;层次１
             (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")  ;;层次2
             (sequence "|" "CANCELED")))                         ;;层次3
;;切换层次的快捷键
;;'C-S-<RIGHT>'
;;‘C-S-<LEFT>'
;;'C-u C-u C-c C-t'
#+end_src

**** Fast access to TODO states

#+begin_src emacs-lisp
(setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(d)")
             (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
             (sequence "|" "CANCELED(c)")))
;;用字母来快速切换
#+end_src

**** TODO

*** Progress Logging

**** Closing items

#+begin_src emacs-lisp
(setq org-log-done 'time)
;;为todo 事项添加完成的时间戳
#+end_src

#+begin_src emacs-lisp
(setq org-log-done 'note)
;;为todo 事项添加完成记录
#+end_src

*** Priorities(优先级)

快捷键　S-<UP>/<

** Tags

*** Tag Inheritance

快捷键　C-c C-c 为headline　添加Tag

*** CANCELLED Tag Searches

- State "CANCELLED"  from "TODO"       [2019-05-03 五 15:15] \\
  天气原因，今天不晨跑


‘C-c / m’ or ‘C-c \’ (‘org-match-sparse-tree’)

** Dates and Times

*** creating timestamps

<2019-05-05 日 09:00>--<2019-05-05 日 11:30>

| command          | describe                                      |
|------------------+-----------------------------------------------|
| *C-c .*          | org-time-stamp(use twice insert a time range) |
| *C-c >*          | org-goto-calendar                             |
| S-<left>/<right> | change to previous day and next day           |
| S-<up>/<down>    | change to previous month and next month       |
| *C-c C-y*        | evaluate time at range                        |

*** Deadlines(最后期限) and Scheduling(预计时间)

SCHEDULED: <2019-05-05 日 12:00> DEADLINE: <2019-05-05 日 12:00>

**** Inserting deadlines or schedules

| command | describe                                                          |
|---------+-------------------------------------------------------------------|
| C-c C-d | deadline                                                          |
| C-c C-s | schedule                                                          |
| C-c /   | only show deadline at current buffer                              |
| C-c / b | Sparse tree for deadlines and scheduled items before a given date |
| C-c / a | Sparse tree for deadlines and scheduled items after a given date  |

**** Repeated tasks

yearly   'y'
monthly  'm'
weekly   'w'
daily    'd'
hourly   'h'

such as:
DEADLINE: <2005-10-01 Sat +1m -3d>

***** Pay the rent
DEADLINE: <2005-11-01 Tue +1m>

移动到headline 按S-<left>/<down>，每个月的这一天都重复这一件事
'+1m' 可以换成'+1w' '+1y' '+1d' '+1h'

** Capture, Refile, Archive

*** Capture

**** Setting up capture
#+begin_src emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
#+end_src

* package skewer

** 如何 skewer HTML 文件？

有个大前提就是自己已经配置好了相应的 Web 开发的配置。例如：已经为 html-mode, css-mode, js2-mode 添加对应的钩子 skewer-html-mode, skewer-css-mode, skewer-mode

以下是为对应的 mode 添加 skewer 配置
#+BEGIN_SRC emacs-lisp

(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)

#+END_SRC


1) 打开自己的 HTML 文件。(里面必须包含以下语句)
#+BEGIN_SRC html
    <script src="http://localhost:8080/skewer"></script>
#+END_SRC

例如：
#+BEGIN_SRC html

<!doctype html>
<html>
  <head>
    <title>文档标题</title>
    <meta charset="utf-8" />
  </head>
  <body>
    <script src="http://localhost:8080/skewer"></script>
  </body>
</html>


#+END_SRC

2) 手动执行 http-start 命令。（M-x http-start RET）
3) 在 Browser 里打开 HTML 文件 (可以手动拖拽 HTML 文件至 Browser，或者自己在 Emacs 里写一个命令)
4) 为了建立 Browser 与 Emacs 之间的链接，必须手动在 Browser 里刷新一次页面
5) 之后就可以使用 skewer 里提供的快捷键，Live Web development with Emacs
