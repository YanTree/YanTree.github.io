#+STARTUP: indent
** config global user's imformation

 $ git config --global user.name "YanTree"
 $ git config --global user.email "yanshudream@outlook.com"

** 解决git push代码到github上一直提示输入用户名及密码的问题
*** 原因分析

出现这种情况的原因是我们使用了http的方式clone代码到本地,相应的,也是使用http的方式将代码push到服务器.

*** 解决办法

解决办法很简单,将http方式改为ssh方式即可.

step : 1.先查看当前方式
         git remote -v

       2.把http方式改为ssh方式。先移除旧的http的origin
         git remote rm origin

       3.再添加新的ssh方式的origin
         git remote add origin git@github.com:username/programname.git（可以直接去clone一份地址from github）

       4.改动完之后直接执行git push是无法推送代码的，需要设置一下上游要跟踪的分支,
         与此同时会自动执行一次git push命令,此时已经不用要求输入用户名及密码啦！
         git push --set-upstream origin master

** 工作区的文件操作
*** 撤销操作

（使用 "git checkout -- <文件>..." 丢弃工作区的改动）
例如： git checkout -- filename

*** 提交和删除操作

（使用 "git add/rm <文件>..." 更新要提交的内容）
例如： 添加 git add filename
      删除 git rm filename

*** 移除版本控制

先 git  rm  -r  --cached   文件
在 .gitignore中添加
最后 gti commit -m  '提交.gitignore'

** branch操作
*** 创建操作

1我们创建dev分支，然后切换到dev分支

$ git checkout -b dev
   Switched to a new branch 'dev'
2.git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev
$ git checkout dev
   Switched to branch 'dev'
*** 查看并切换

1.查看

$ git branch
  * dev
    master

2.切换

$ git checkout {dev}
*** 合并(merge)

$ git merge dev
*** delete

$ git branch -d dev
Deleted branch dev (was b17d20e).

** 设置远程仓库
1.创建SSH key
   打开Shell,创建ssh key
$ ssh-keygen -t rsa -C "youremail@example.com"
$ ssh-keygen -t rsa -C "yanshudream@outlook.com"

id_rsa是私钥   id_rsa.pub是公钥

2.登录Github
   打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，
填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容,点“Add Key”，你
就应该看到已经添加的Key.
** push an existing repository from the command line

   1.git remote add origin git@github.com:YanTree(github account)
/.emacs.d(your repository name).git
   2.git push -u origin master
** create a new repository on the command line

   1.echo "# .emacs.d(your repository name)" >> README.md
   2.git init
   3.git add README.md
   4.git commit -m "first commit"
   5.git remote add origin git@github.com:YanTree(git account)
/.emacs.d(your repository name).git
   6.git push -u origin master
** 回滚
1.查看当前版本库的状态 |git log| or |git log --pretty=oneline|
2.回滚到上一次提交 |git reset --hard HEAD^|
3.或者 |git reset --hard (commit id(前五到六位数就够了))|

注：1.参数 --hard的作用
    2.HEAD^^=HEAD~2 回滚到前两次提交的状态

4.如果想恢复到新版本
注：1.git reflog 查看commit记录
    2.根据commit id 进行回滚(见方法3)
** pull requests and merge

1.pull requests

就是向一个分支提出合并请求，合并前弄清楚谁是被合并的分支

2.merge

在提出一个pull requests 请求后，我们可以合并分支，也可以不合并，这就是这一步要做的事情。在合并时也可能出现问题，到时候自行Google，目前的经历的一个问题，是通过删除或保留一些“问题”文件解决的。
